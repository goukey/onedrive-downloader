name: Build Executables

on:
  push:
    branches: [main]
    tags:
      - 'v*'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install nuitka ordered-set zstandard
    
    - name: Build Windows executable
      run: |
        # 创建缓存目录并下载 Dependency Walker
        $depCachePath = "$env:LOCALAPPDATA\Nuitka\Nuitka\Cache\downloads\depends\x86_64"
        New-Item -Path $depCachePath -ItemType Directory -Force
        Invoke-WebRequest -Uri "https://dependencywalker.com/depends22_x64.zip" -OutFile "$depCachePath\depends22_x64.zip"
        Expand-Archive -Path "$depCachePath\depends22_x64.zip" -DestinationPath $depCachePath -Force

        python -m nuitka `
          --windows-console-mode=disable `
          --onefile `
          --enable-plugin=pyqt6 `
          --windows-icon-from-ico=assets/icon.ico `
          --follow-imports `
          --output-dir=build `
          --output-filename="OneDrive下载器-Windows.exe" `
          gui.py
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: OneDrive-Downloader-Windows
        path: build/OneDrive下载器-Windows.exe

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y patchelf
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install nuitka ordered-set zstandard
    
    - name: Build Linux executable
      run: |
        python -m nuitka \
          --onefile \
          --enable-plugin=pyqt6 \
          --linux-icon=assets/icon-256.png \
          --include-package=requests \
          --follow-imports \
          --output-dir=build \
          --output-filename="OneDrive下载器-Linux" \
          gui.py
    
    - name: Make executable
      run: chmod +x build/OneDrive下载器-Linux
    
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: OneDrive-Downloader-Linux
        path: build/OneDrive下载器-Linux

  # 添加发布任务
  create-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    # 只在标签推送时运行
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      
      - name: Get Version and Changelog
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # 从标签获取版本
            VERSION=${GITHUB_REF#refs/tags/}
            # 获取标签消息
            TAG_MESSAGE=$(git tag -l --format='%(contents)' $VERSION)
            echo "tag_message<<EOF" >> $GITHUB_OUTPUT
            echo "$TAG_MESSAGE" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            # 从 version.py 获取版本
            VERSION=$(python -c "import re; print(re.search(r'__version__ = \"(.+?)\"', open('version.py').read()).group(1))")
            VERSION="v$VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          
          # 获取最近的提交记录作为更新日志
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # 如果是标签，获取上一个标签到当前标签的提交
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$PREVIOUS_TAG" ]; then
              CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..$VERSION)
            else
              # 如果没有上一个标签，获取最近10条提交
              CHANGELOG=$(git log --pretty=format:"- %s" -n 10)
            fi
          else
            # 如果不是标签，获取最近10条提交
            CHANGELOG=$(git log --pretty=format:"- %s" -n 10)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: OneDrive-Downloader-Windows
          path: ./artifacts/windows
      
      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: OneDrive-Downloader-Linux
          path: ./artifacts/linux
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: OneDrive下载器 ${{ steps.get_version.outputs.version }} (${{ steps.get_version.outputs.date }})
          tag_name: ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            ./artifacts/windows/OneDrive下载器-Windows.exe
            ./artifacts/linux/OneDrive下载器-Linux
          body: |
            # OneDrive下载器 ${{ steps.get_version.outputs.version }}
            
            发布日期: ${{ steps.get_version.outputs.date }}
            
            ## 更新内容
            ${{ steps.get_version.outputs.tag_message || steps.get_version.outputs.changelog }}
            
            ## 下载
            - [Windows版本](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/OneDrive下载器-Windows.exe)
            - [Linux版本](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/OneDrive下载器-Linux) 